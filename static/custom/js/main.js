// GLOBAL VARIABLES
let parsedPriceData;
let organizedTickerData;
let tickers;
let numStocksSelected = 0;

const keywordInput = document.getElementById('keywordInput');
const keywordList = document.getElementById('keywordList');
let keywordItems = document.querySelectorAll('.keywordItem');

/* ------------- *
 *   FUNCTIONS
 * ------------- */

/**
 * @param {*} input 
 * Turns an `input` string (raw CSV text) into a 2-dimensional array.  
 * _Borrowed from user Bergi on StackOverflow_  
 * _https://stackoverflow.com/questions/11786995/create-object-on-the-fly-from-csv_  
 * @returns an Array containing rows of CSV data
 */
function parsePriceCSV(input) {
    var rows = input.split(/\r?\n/);
    var keys = rows.shift().split(",");
    return rows.map(function(row) {
        return row.split(",").reduce(function(oneRow, val, i) {
            oneRow[keys[i]] = val;
            return oneRow;
        }, {});
    });
}

// TODO ADD BUTTON TO REMOVE ALL SELECTED STOCKS

/**
 * @param {*} inputArr 
 * _Generated by ChatGPT 3.5 and tweaked to our purposes._  
 * @returns an Object formatted with collapsing {ticker: {(ticker, string): {priceHistory: {(month, integer): {data...}}}}}. See comment below docket.
 */
/*
 * Ticker  
 *  ┕ priceHistory:  
 *      ┝ 1: (month)  
 *          ┝ open: price  
 *          ┝ close: price  
 *          ┕ ...  
 *      ┝ 2:  
 *      ┕ ... 12:  
 */
function convertData(inputArr) {
    let output = {};
    
    inputArr.forEach(item => {
        const { Index, ticker, date, ...rest } = item;
        
        if (!output[ticker]) {
            output[ticker] = {
                priceHistory: {}
            };
        };
        
        //filter out just the month from the date, parse as integer
        output[ticker].priceHistory[parseInt(date.slice(5,7))] = rest;
    });
    
    return output;
}

function genPriceTrace(ticker, dataObject, dataPoint) {

    tickerData = dataObject[ticker].priceHistory;
    months = []
    prices = []

    for(let key in tickerData) {
        months.push(key);
    };

    //iterate through months
    for (let key in tickerData) {
        prices.push(tickerData[key][`${dataPoint}`]);
    };

    trace = {
        x: months,
        y: prices,
        mode: 'lines',
        name: ticker
    };

    return trace;
}


/* ------------- *
 *   INIT CODE
 * ------------- */

// grab stock data and process it
// EVERYTHING SHOULD BE IN THE SECOND .then() SO THAT IT GETS EXECUTED IN ORDER
fetch('Resourses/stockdata.csv')
    .then(response => response.text())
    .then(function(table) {
        
        //convert csv array to more presentable 
        organizedTickerData = convertData(parsePriceCSV(table));
        tickers = Object.keys(organizedTickerData);
        console.log("tickers: ", tickers);
        console.log(organizedTickerData);

        //console.log(organizedTickerData.AAPL.priceHistory[2].open)
        sampletrace = genPriceTrace('WMT', organizedTickerData, 'close');
        sampletrace2 = genPriceTrace('GM', organizedTickerData, 'close');
        plotStocks([sampletrace, sampletrace2]);
        console.log();



        
    
        //assigning the keyword list
        let kwList = d3.select('#keywordList');
    
        //add first ticker as a selected stock, set numStocksSelected to reflect
        kwList.append("li").classed("keywordItem", true).classed("selected", true).text(tickers[0]);
        numStocksSelected = 1;
        //adding the rest of our stock tickers
        for(i=i;i<tickers.length;i++) {
            kwList.append("li").classed("keywordItem", true).classed("selected", false).text(tickers[i]);
        }
        keywordItems = document.querySelectorAll('.keywordItem');

    }).catch(err => console.log(err));

    
/* --------------- *
 * EVENT LISTENERS
 * --------------- */

keywordInput.addEventListener('input', function() {
    let filter = keywordInput.value.trim().toLowerCase(); // trim() to remove leading/trailing spaces
    console.log(keywordItems);
    keywordItems.forEach(item => {
        let text = item.textContent.toLowerCase();
        if (text.includes(filter)) {
            item.style.display = 'block';
        } else {
            item.style.display = 'none';
        }
    });
});

// Event listener to handle keyword selection
keywordList.addEventListener('click', function(event) {
    if (event.target.classList.contains('keywordItem')) {
        const selectedKeyword = event.target.textContent;
        console.log('Selected keyword:', selectedKeyword);

        //selected with d3 here so we can add classes
        keywordBox = d3.select("#keywordList");

        //if it does NOT contain 'selected'
        if (!event.target.classList.contains('selected')) {
            if (numStocksSelected < 5) {
                // Add the 'selected' class to the clicked item
                event.target.classList.add('selected');
                numStocksSelected++;
            }
        } else {
            event.target.classList.remove('selected');
            numStocksSelected--;
        }

        if (numStocksSelected >= 5) {
            keywordBox.classed('full', true);
        } else {
            keywordBox.classed('full', false);
        } 
    }
});